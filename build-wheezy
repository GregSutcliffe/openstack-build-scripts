#!/bin/sh

set -e
set -x

if [ "${1}" = "--minimal" ] ; then
	EXTRA=no
else
	EXTRA=yes
fi

NEEDED_PACKAGES=sudo,adduser,locales,extlinux,openssh-server,linux-image-amd64,euca2ools,file,python,python-paramiko,python-argparse,python-cheetah,python-configobj,python-oauth,python-software-properties,python-yaml,python-boto,python-prettytable,initramfs-tools,python-requests
EXTRA_PACKAGES=bash-completion,joe,most,screen,less,vim

if [ ${EXTRA} = "no" ] ; then
	PKG_LIST=${NEEDED_PACKAGES}
else
	PKG_LIST=${NEEDED_PACKAGES},${EXTRA_PACKAGES}
fi

# Dependencies
apt-get install -y qemu kpartx parted mbr debootstrap extlinux
wget http://ftp.de.debian.org/debian/pool/main/c/cloud-init/cloud-init_0.7.1-3~bpo70+1_all.deb
wget http://ftp.de.debian.org/debian/pool/main/c/cloud-utils/cloud-utils_0.26-1_all.deb
wget http://ftp.de.debian.org/debian/pool/main/c/cloud-initramfs-tools/cloud-initramfs-growroot_0.18.debian2_all.deb

# Needed for loop mounts
modprobe dm-mod

DEB_MIRROR=http://ftp.uk.debian.org/debian

FLAVOR=wheezy
FILE_NAME=debian-${FLAVOR}-7.0.0-2-amd64
AMI_NAME=${FILE_NAME}.raw
QCOW2_NAME=${FILE_NAME}.qcow2
rm -f ${AMI_NAME}

######################################
### Prepare the HDD (format, ext.) ###
######################################
PARTED=/sbin/parted
qemu-img create ${AMI_NAME} 1G

${PARTED} -s ${AMI_NAME} mktable msdos
${PARTED} -s -a optimal ${AMI_NAME} mkpart primary ext3 1M 100%
${PARTED} -s ${AMI_NAME} set 1 boot on
install-mbr ${AMI_NAME}
kpartx -av ${AMI_NAME}

# We first use ext2, THEN convert to ext3, because that's so much faster this way.
mkfs.ext2 /dev/mapper/loop0p1

# No fsck because of X days without checks
tune2fs -i 0 /dev/mapper/loop0p1

MOUNT_DIR=`mktemp -d -t build-debimg.XXXXXX`
mount -o loop /dev/mapper/loop0p1 ${MOUNT_DIR}
debootstrap --verbose \
	--include=${PKG_LIST} \
	wheezy ${MOUNT_DIR} ${DEB_MIRROR}

############################
### Customize the distro ###
############################
### Customize: access to the VM ###
# # # # # # # # # # # # # # # # # #
# Setup default root password to: password
chroot ${MOUNT_DIR} sh -c "echo root:password | chpasswd"

# Otherwise, we have a huge backdoor, since the root password
# is always the same.
#sed -i "s/PermitRootLogin yes/PermitRootLogin without-password/" ${MOUNT_DIR}/etc/ssh/sshd_config

# Add a default "debian" user which is used by cloud-init by default
chroot ${MOUNT_DIR} adduser --gecos Debian-cloud-init-user --disabled-password --quiet debian

# Adds the "debian" user to sudoers, since that is the way
# cloud-init grant access
mkdir -p ${MOUNT_DIR}/etc/sudoers.d
echo "debian ALL = NOPASSWD: ALL" >${MOUNT_DIR}/etc/sudoers.d/debian-cloud-init
chmod 0440 ${MOUNT_DIR}/etc/sudoers.d/debian-cloud-init

# cloud-init will put the ssh key in whatever is
# configured in the sshd_config. So we put the
# debian standard config as explicit in sshd_config.
sed -i -e 's|^#AuthorizedKeysFile[ \t]%h/.ssh/authorized_keys|AuthorizedKeysFile %h/.ssh/authorized_keys2|' ${MOUNT_DIR}/etc/ssh/sshd_config

### Customize: misc stuff ###
# # # # # # # # # # # # # # #
# Setup fstab
echo "# /etc/fstab: static file system information.
proc	/proc	proc	nodev,noexec,nosuid	0	0
/dev/vda1	/	ext3	errors=remount-ro	0	1
" > ${MOUNT_DIR}/etc/fstab
chroot ${MOUNT_DIR} mount /proc || true

# Enable bash-completion by default
if [ ${EXTRA} = "yes" ] ; then
	echo "# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi" >>${MOUNT_DIR}/etc/bash.bashrc

	# No clear for the tty1 console
	sed -i "s#1:2345:respawn:/sbin/getty 38400 tty1#1:2345:respawn:/sbin/getty --noclear 38400 tty1#" ${MOUNT_DIR}/etc/inittab

	chroot ${MOUNT_DIR} apt-get install -y --force-yes locales-all
fi

rm -f ${MOUNT_DIR}/etc/ssh/ssh_host_*
rm -f ${MOUNT_DIR}/etc/udev/rules.d/70-persistent-net.rules

# Setup networking (eg: DHCP by default)
echo "# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The normal eth0
auto eth0
iface eth0 inet dhcp

# Maybe the VM has 2 NICs?
allow-hotplug eth1
iface eth1 inet dhcp

# Maybe the VM has 3 NICs?
allow-hotplug eth2
iface eth2 inet dhcp
" > ${MOUNT_DIR}/etc/network/interfaces

# Setup the default hostname (will be set by cloud-init
# at boot time anyway)
echo "debian.example.com" >${MOUNT_DIR}/etc/hostname

# This should be a correct default everywhere
echo "deb http://http.debian.net/debian wheezy main
deb-src http://http.debian.net/debian wheezy main
deb http://http.debian.net/debian wheezy-updates main
deb-src http://http.debian.net/debian wheezy-updates main
deb http://security.debian.org/ squeeze/updates main
deb-src http://security.debian.org/ squeeze/updates main
" >${MOUNT_DIR}/etc/apt/sources.list
chroot ${MOUNT_DIR} apt-get update

# Setup some cloud stuff
PKGS="cloud-init cloud-utils cloud-initramfs-growroot"
for i in $PKGS ; do
	cp ${i}_*.deb ${MOUNT_DIR}
	chroot ${MOUNT_DIR} dpkg -i ${i}_*.deb
	rm ${MOUNT_DIR}/${i}_*.deb
done

# For OpenStack, we would like to use Ec2 and no other API
echo "# to update this file, run dpkg-reconfigure cloud-init
datasource_list: [ Ec2 ]" >${MOUNT_DIR}/etc/cloud/cloud.cfg.d/90_dpkg.cfg

# Setting-up initramfs
chroot ${MOUNT_DIR} update-initramfs -u

rm ${MOUNT_DIR}/var/cache/apt/archives/*.deb

###########################
### Setting-up extlinux ###
###########################
KERNEL=`chroot ${MOUNT_DIR} find boot -name 'vmlinuz-*'`
RAMDISK=`chroot ${MOUNT_DIR} find boot -name 'initrd.img-*'`
UUID=`blkid -o value -s UUID /dev/mapper/loop0p1`
echo "default linux
timeout 1
label linux
kernel ${KERNEL}
append initrd=${RAMDISK} root=/dev/vda1 ro quiet" > ${MOUNT_DIR}/boot/extlinux/extlinux.conf
cp ${MOUNT_DIR}/boot/extlinux/extlinux.conf ${MOUNT_DIR}/extlinux.conf
extlinux --install ${MOUNT_DIR}

##########################
### Unmount everything ###
##########################
chroot ${MOUNT_DIR} umount /proc || true
umount ${MOUNT_DIR}
# Run FSCK so that resize can work
tune2fs -j /dev/mapper/loop0p1
fsck.ext3 -f /dev/mapper/loop0p1 || true
kpartx -d ${AMI_NAME}
rmdir ${MOUNT_DIR}
qemu-img convert -c -f raw ${AMI_NAME} -O qcow2 ${QCOW2_NAME}
